import { createReducer } from 'typesafe-actions';
import { informationActionType } from '../../action/information';
import {
  INPUT,
  SEX,
  BIRTHDATE,
  BIRTHMONTH,
  BIRTHYEAR,
  PICTUREURL,
  SCHOOLCODE,
  ADDRESS_AND_CODE,
  INFORMATION,
  INFORMATION_SUCCESS,
  INFORMATION_FAILURE,
  GRADUATE_INFORMATION,
  GRADUATE_INFORMATION_SUCCESS,
  GRADUATE_INFORMATION_FAILURE,
  GET_INFORMATION_SUCCESS,
  GET_INFORMATION_FAILURE,
  GET_GRADUATE_INFORMATION_SUCCESS,
  GET_GRADUATE_INFORMATION_FAILURE,
  USER_PICTURE,
  USER_PICTURE_SUCCESS,
  USER_PICTURE_FAILURE,
  SEARCH_SCHOOL,
  SEARCH_SCHOOL_SUCCESS,
  SEARCH_SCHOOL_FAILURE,
  SCHOOL_NAME,
  GED_SCORE,
  GED_SCORE_FAILURE,
  GED_SCORE_SUCCESS,
  GET_GED_SCORE_FAILURE,
  GET_GED_SCORE_SUCCESS,
} from '../../action/information/interface';
import InformationState from './interface';

const initState: InformationState = {
  sex: '',
  birthYear: 2021,
  birthMonth: 1,
  birthDate: 1,
  parentName: '',
  parentTel: '',
  telephoneNumber: '',
  address: '',
  detailAddress: '',
  postCode: '',
  schoolCode: '',
  schoolTel: '',
  stdGrade: '',
  stdClass: '',
  stdNumber: '',
  schoolName: '',
  searchSchoolName: '',
  totalScore: 0,
  photoFileName: '',
  pictureUrl: '',
  userPicture: null,
  page: 0,
  size: 0,
  totalPages: 0,
  content: [],
  error: {
    status: 0,
    type: '',
    message: '',
  },
  isSuccessSaveUserPicture: undefined,
  isSuccessSaveInformation: undefined,
  isSuccessSaveGraduateInformation: undefined,
  isSuccessSaveGedScore: undefined,
  isSuccessGetSearchSchool: undefined,
};

const informationReducer = createReducer<InformationState, informationActionType>(initState, {
  [INPUT]: (state, action) => ({
    ...state,
    [action.payload.name]: action.payload.value,
    isSuccessSaveInformation: undefined,
    isSuccessSaveGraduateInformation: undefined,
  }),
  [SEX]: (state, action) => ({
    ...state,
    sex: action.payload,
    isSuccessSaveInformation: undefined,
  }),
  [BIRTHYEAR]: (state, action) => ({
    ...state,
    birthYear: action.payload,
    isSuccessSaveInformation: undefined,
  }),
  [BIRTHMONTH]: (state, action) => ({
    ...state,
    birthMonth: action.payload,
    isSuccessSaveInformation: undefined,
  }),
  [BIRTHDATE]: (state, action) => ({
    ...state,
    birthDate: action.payload,
    isSuccessSaveInformation: undefined,
  }),
  [PICTUREURL]: (state, action) => ({
    ...state,
    pictureUrl: action.payload,
  }),
  [SCHOOLCODE]: (state, action) => ({
    ...state,
    schoolCode: action.payload,
    isSuccessSaveGraduateInformation: undefined,
  }),
  [SCHOOL_NAME]: (state, action) => ({
    ...state,
    schoolName: action.payload,
  }),
  [ADDRESS_AND_CODE]: (state, action) => ({
    ...state,
    address: action.payload.address,
    postCode: action.payload.postCode,
    isSuccessSaveInformation: undefined,
  }),
  [INFORMATION]: state => ({
    ...state,
    isSuccessSaveInformation: undefined,
  }),
  [INFORMATION_SUCCESS]: state => ({
    ...state,
    isSuccessSaveInformation: true,
  }),
  [INFORMATION_FAILURE]: (state, action) => ({
    ...state,
    isSuccessSaveInformation: false,
    error: action.payload,
  }),
  [GRADUATE_INFORMATION]: state => ({
    ...state,
    isSuccessSaveGraduateInformation: undefined,
  }),
  [GRADUATE_INFORMATION_SUCCESS]: state => ({
    ...state,
    isSuccessSaveGraduateInformation: true,
  }),
  [GRADUATE_INFORMATION_FAILURE]: (state, action) => ({
    ...state,
    isSuccessSaveGraduateInformation: false,
    error: action.payload,
  }),
  [GET_INFORMATION_SUCCESS]: (state, action) => ({
    ...state,
    sex: action.payload.sex,
    birthYear: action.payload.birthday ? Number(action.payload.birthday.slice(0, 4)) : 2021,
    birthMonth: action.payload.birthday ? Number(action.payload.birthday.slice(5, 7)) : 1,
    birthDate: action.payload.birthday ? Number(action.payload.birthday.slice(8)) : 1,
    parentName: action.payload.parent_name,
    parentTel: action.payload.parent_tel,
    telephoneNumber: action.payload.telephone_number,
    address: action.payload.address,
    detailAddress: action.payload.detail_address,
    postCode: action.payload.post_code,
    photoFileName: action.payload.photo_file_name,
  }),
  [GET_INFORMATION_FAILURE]: (state, action) => ({
    ...state,
    error: action.payload,
  }),
  [GET_GRADUATE_INFORMATION_SUCCESS]: (state, action) => ({
    ...state,
    sex: action.payload.sex,
    birthYear: action.payload.birthday ? Number(action.payload.birthday.slice(0, 4)) : 2021,
    birthMonth: action.payload.birthday ? Number(action.payload.birthday.slice(4, 6)) : 1,
    birthDate: action.payload.birthday ? Number(action.payload.birthday.slice(6)) : 1,
    parentName: action.payload.parent_name,
    parentTel: action.payload.parent_tel,
    telephoneNumber: action.payload.telephone_number,
    address: action.payload.address,
    detailAddress: action.payload.detail_address,
    postCode: action.payload.post_code,
    photoFileName: action.payload.photo_file_name,
    stdGrade: action.payload.student_number ? action.payload.student_number.slice(0, 1) : '',
    stdClass: action.payload.student_number ? action.payload.student_number.slice(1, 3) : '',
    stdNumber: action.payload.student_number ? action.payload.student_number.slice(3) : '',
    schoolName: action.payload.school_name,
    schoolCode: action.payload.school_code,
    schoolTel: action.payload.school_tel,
  }),
  [GET_GRADUATE_INFORMATION_FAILURE]: (state, action) => ({
    ...state,
    error: action.payload,
  }),
  [USER_PICTURE]: (state, action) => ({
    ...state,
    userPicture: action.payload,
    isSuccessSaveUserPicture: undefined,
  }),
  [USER_PICTURE_SUCCESS]: state => ({
    ...state,
    isSuccessSaveUserPicture: true,
  }),
  [USER_PICTURE_FAILURE]: (state, action) => ({
    ...state,
    error: action.payload,
    isSuccessSaveUserPicture: false,
  }),
  [SEARCH_SCHOOL]: (state, action) => ({
    ...state,
    searchSchoolName: action.payload.name,
    size: action.payload.size,
    page: action.payload.page,
    content: action.payload.name === state.searchSchoolName ? state.content : [],
  }),
  [SEARCH_SCHOOL_SUCCESS]: (state, action) => ({
    ...state,
    isSuccessGetSearchSchool: true,
    content: state.content ? state.content.concat(action.payload.content) : action.payload.content,
    totalPages: action.payload.total_pages,
  }),
  [SEARCH_SCHOOL_FAILURE]: (state, action) => ({
    ...state,
    error: action.payload,
    isSuccessGetSearchSchool: false,
  }),
  [GED_SCORE]: (state, action) => ({
    ...state,
    isSuccessSaveGedScore: undefined,
    totalScore: action.payload > -1 ? action.payload : state.totalScore,
  }),
  [GED_SCORE_SUCCESS]: state => ({
    ...state,
    isSuccessSaveGedScore: undefined,
  }),
  [GED_SCORE_FAILURE]: (state, action) => ({
    ...state,
    error: action.payload,
    isSuccessSaveGedScore: false,
  }),
  [GET_GED_SCORE_SUCCESS]: (state, action) => ({
    ...state,
    totalScore: action.payload.average_score,
  }),
  [GET_GED_SCORE_FAILURE]: (state, action) => ({
    ...state,
    error: action.payload,
  }),
});

export default informationReducer;
